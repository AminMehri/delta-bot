import numpy as np


def find_nearest(array, value):
    array = np.asarray(array)
    idx = (np.abs(array - float(value))).argmin()
    return array[idx]


# 0
grades = [19.98,19.93,19.88,19.83,19.78,19.73,19.68,19.63,19.58,19.53,19.48,19.43,19.38,19.33,19.28,19.23,19.18,19.13,19.08,19.03,
		  18.95,18.85,18.75,18.65,18.55,18.45,18.35,18.25,18.15,18.05,
		  17.95,17.85,17.75,17.65,17.55,17.45,17.35,17.25,17.15,17.05,
		  16.95,16.85,16.75,16.65,16.55,16.45,16.35,16.25,16.15,16.05,
		  15.95,15.85,15.75,15.65,15.55,15.45,15.35,15.25,15.15,15.05,
		  14.88,14.63,14.37,14.12,13.88,13.63,13.37,13.12,12.88,12.63,12.37,12.12,11.88,11.63,11.37,11.12,
		  10.75,10.30,9,8,7,6
		  ]
taraz =  [12800, 12700, 12500, 12150, 11960, 11650, 11400, 11250, 11100, 11050, 11000, 10800, 10700, 10600, 10500, 10400, 10375, 10350, 10300, 10100, 9800, 9700, 9600, 9400, 9300, 9100, 9000, 8900, 8800, 8700, 8600, 8500, 8400, 8350, 8300, 8200, 8100, 8000, 7950, 7900, 7700, 7680, 7660, 7640, 7620, 7600, 7500, 7400, 7375, 7350, 7325, 7300, 7200, 7100, 7080, 7060, 7040, 7020, 7010, 7000, 6600, 6500, 6450, 6250, 6190, 6160, 6120, 5900, 5760, 5690, 5650, 5600, 5500, 5400, 5300, 5200, 5100, 5000, 4700, 4400, 4000, 4000]


def grade_taraz_func(grade:float):
    g = find_nearest(grades, value=grade)
    return taraz[grades.index(g)]


# 1
humanities_zarib = [9, 12, 7]
# شیمی ریاضی فیزیک
percents = {
10: [7600, 7800, 7700],
15: [8000, 8200, 8100],
20: [8400, 8600, 8500],
25: [8800, 9000, 8900],
30: [9200, 9400, 9300],
35: [9600, 9800, 9700],
40: [10000, 10200, 10500],
45: [10300, 10600, 11000],
50: [10600, 11000, 11300],
55: [10900, 11400, 11600],
60: [11300, 11800, 11900],
65: [11700, 12200, 12200],
70: [12100, 12600, 12500],
75: [12400, 13000, 12800],
80: [12800, 13500, 13100],
85: [13200, 13900, 13400],
90: [13600, 14300, 13700],
95: [13900, 14500, 14000],
}

def percent_taraz(per:list):
    total_taraz = 0
    for ind, value in enumerate(per):
        g = find_nearest(list(percents.keys()), value=value)
        tara = percents.get(g)      
        total_taraz += tara[ind] * humanities_zarib[ind]
    return total_taraz / sum(humanities_zarib) # tot


# 2
taraz_kol = [12500, 11750, 11250, 10800, 10650, 10550, 10450, 10350, 10250, 10150, 10000, 
			 9850, 9750,9650,9550,9450,9350,9250,9150,9050,8975,8925,8875,8825,8775,8725,8650,8550,8450,
			 8350,8250,8150,8050,7975,7925,7850,7750,7650,7550,7250,6750,6250]



keshvary_grade = ['0-100','100-200','200-300','300-400','400-500','500-600','600-700','700-800','800-900','900-1000','1000-1200','1200-1400','1400-1600','1600-1800','1800-2000','2000-2200','2200-2400','2400-2600','2600-2800','2800-3000','3000-3200','3200-3400','3600-3800','3800-4000','4000-4200','4200-4400','4400-4600','4600-4800','4800-5000','5000-5500','5500-6500','6500-7000','7000-7500','7500-8000','8000-8500','8500-9000','9000-9500','9500-10000','10500-11500','11500-12500','12500-17000','17000-26000',]
mantaghe_1 = ['1-59','60-124','125-185','186-247','248-308','309-369','370-430','431-491','492-552','553-612','613-732','733-852','853-971','972-1089','1090-1206','1207-1341','1342-1457','1458-1572','1573-1687','1688-1801','1802-1914','1915-2027','2028-2139','2140-2250','2251-2361','2362-2471','2472-2580','2581-2797','2798-3171','3172-3433','3434-3947','3948-4199','4200-4448','4449-4935','4936-5174','5175-5410','5411-5643','5644-5873','5874-6325','6326-8439','8440-11080','11081-14132',]
mantaghe_2 = ['1-24','35-67','68-99','100-131','132-164','165-196','197-229','230-262','263-294','294-327','328-393','394-459','460-525','526-592','593-659','660-726','727-793','794-860','861-928','929-996','997-1064','1065-1133','1134-1201','1202-1270','1271-1339','1340-1409','1410-1478','1479-1617','1618-1863','1864-2041','2042-2398','2399-2578','2579-2759','2760-3125','3126-3208','3209-3493','3494-3679','3680-3865','3866-4239','4260-6146','6146-8874','8878-12417',]
mantaghe_3 = ['1-4','5-9','10-16','17-25','26-30','31-34','35-39','40-45','46-50','51-55','56-67','68-79','80-92','93-105','106-119','120-133','134-148','149-163','164-180','181-196','197-213','214-321','322-249','250-268','269-287','288-307','308-328','329-370','371-448','449-508','509-636','637-704','705-775','776-925','926-1003','1003-1084','1085-1167','1168-1252','1253-1429','1430-2429','2430-4075','4076-6460',]

def taraz_kol_func(t_kol:float, mantaghe):
	g = find_nearest(taraz_kol, value=t_kol)
	result = f"رتبه کشوری: {keshvary_grade[taraz_kol.index(g)]}\n"
	if mantaghe == "1":
		result += f"رتبه منطقه یک: {mantaghe_1[taraz_kol.index(g)]}"

	elif mantaghe == "2":
		result += f"رتبه منطقه دو: {mantaghe_2[taraz_kol.index(g)]}"
	
	elif mantaghe == "3":
		result += f"رتبه منطقه سه: {mantaghe_3[taraz_kol.index(g)]}"	
	
	return result




# 3
import re

result_region_1 = [1,10,20,30,40,50,60,80,90,100,150,200,250,300,350,400,500,600,700,800,900,1000,1100,1200,1300,1400,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4400,4500,4600,4700,4800,4900,5000]

result_region_2 = [10,20,30,40,50,60,70,80,90,100,150,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,3000,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600]

result_region_3 = [1,10,20,50,80,100,150,200,250,300,400,450,500,550,600,700,750,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500]


def handle_resault(num: int, region: int):
	if region == 1:
		r_a = result_region_1.copy()
		f = find_nearest(r_a, value=num)
		r_a.remove(f)
		e = find_nearest(r_a, value=num)
		try:
			x = result_region_1[result_region_1.index(int(max(f,e))) + 1]
		except:
			return [f"رتبه {min(f, e)} تا {max(f, e)}", "END"]
	if region == 2:
		r_a = result_region_2.copy()
		f = find_nearest(r_a, value=num)
		r_a.remove(f)
		e = find_nearest(r_a, value=num)
		try:
			x = result_region_2[result_region_2.index(int(max(f,e))) + 1]
		except:
			return [f"رتبه {min(f, e)} تا {max(f, e)}", "END"]
	if region == 3:
		r_a = result_region_3.copy()
		f = find_nearest(r_a, value=num)
		r_a.remove(f)
		e = find_nearest(r_a, value=num)
		try:
			x = result_region_3[result_region_3.index(int(max(f,e))) + 1]
		except:
			return [f"رتبه {min(f, e)} تا {max(f, e)}", "END"]
	return [f"رتبه {min(f, e)} تا {max(f, e)}", f"رتبه {max(f, e)} تا {x}"]


def read_and_print_content(filename, start_pattern, end_pattern):
	with open(filename, 'r', encoding='utf-8') as file:
		content = file.read()

	start_match = re.search(start_pattern, content)
	end_match = re.search(end_pattern, content)

	if start_match and end_match:
		start_index = start_match.end()
		end_index = end_match.start()
		return content[start_index:end_index]
	else:
		return f"اطلاعاتی برای این رتبه در دسترس نیست."

def get_konkor_grade(grade, region):
	if region == '1':
		filename = "file/math/منطقه 1.txt"
	elif region == '2':
		filename = "file/math/منطقه 2.txt"
	elif region == '3':
		filename = "file/math/منطقه 3.txt"
	else:
		return "خطایی رخ داده است"
	x = handle_resault(int(grade), int(region))
	print(x)
	start_pattern = x[0]
	end_pattern = x[1]
	return read_and_print_content(filename, start_pattern, end_pattern)
