import numpy as np


def find_nearest(array, value):
    array = np.asarray(array)
    idx = (np.abs(array - float(value))).argmin()
    return array[idx]


# 0
grades = [19.98,19.93,19.88,19.83,19.78,19.73,19.68,19.63,19.58,19.53,19.48,19.43,19.38,19.33,19.28,19.23,19.18,19.13,19.08,19.03,
		  18.95,18.85,18.75,18.65,18.55,18.45,18.35,18.25,18.15,18.05,
		  17.95,17.85,17.75,17.65,17.55,17.45,17.35,17.25,17.15,17.05,
		  16.95,16.85,16.75,16.65,16.55,16.45,16.35,16.25,16.15,16.05,
		  15.95,15.85,15.75,15.65,15.55,15.45,15.35,15.25,15.15,15.05,
		  14.88,14.63,14.37,14.12,13.88,13.63,13.37,13.12,12.88,12.63,12.37,12.12,11.88,11.63,11.37,11.12,
		  10.75,10.30,9,8,7,6
		  ]
taraz = [12500,12400,12200,11850,11600,11350,11100,10950,10800,10750,10700,10500,10400,10300,10200,10100,10075,10050,10000,9800,9500,9400,9300,9100,9000,8800,8700,8600,8500,8400,8300,8200,8100,8050,8000,7900,7800,7700,7650,7600,7400,7380,7360,7340,7320,7300,7200,7100,7075,7050,7025,7000,6900,6800,6780,6760,6740,6720,6710,6700,6300,6200,6150,5950,5890,5860,5820,5600,5460,5390,5350,5300,5200,5100,5000,4900,4800,4700,4400,4100,3700, 3700]


def grade_taraz_func(grade:float):
    g = find_nearest(grades, value=grade)
    return taraz[grades.index(g)]


# 1
science_zarib = [7, 9, 12, 1, 7]
# ریاضی زمین زیست شیمی فیزیک
percents = {
10: [5900,6500,5600,6300,6900],
15: [6350,6916.66,6066.66,6727.77,7300],
20: [6800,7333.32,6533.32,7155.54,7700],
25: [7250,7749.98,6999.98,7583.31,8100],
30: [7700,8166.64,7466.64,8011.08,8500],
35: [8150,8583.3,7933.3,8438.85,8900],
40: [8600,8999.96,8399.96,8866.62,9300],
45: [9050,9416.62,8866.62,9294.39,9700],
50: [9500,9833.28,9333.28,9722.16,10100],
55: [9950,10249.94,9799.94,10149.93,10500],
60: [10400,10666.6,10266.6,10577.7,10900],
65: [10850,11083.26,10733.26,11005.47,11300],
70: [11300,11499.92,11199.92,11433.24,11700],
75: [11750,11916.58,11666.58,11861.01,12100],
80: [12200,12333.24,12133.24,12288.78,12500],
85: [12650,12749.9,12599.9,12716.55,12900],
90: [13100,13166.56,13066.56,13144.32,13300],
95: [13550,13583.22,13533.22,13572.09,13700],
100: [14000,14000,14000,14000,14100],
}

def percent_taraz(per:list):
    total_taraz = 0
    for ind, value in enumerate(per):
        g = find_nearest(list(percents.keys()), value=value)
        tara = percents.get(g)      
        total_taraz += tara[ind] * science_zarib[ind]
    return total_taraz / sum(science_zarib) # tot



# 2
taraz_kol = [12250, 11300, 11150, 10950, 10850, 10750, 10650, 10550, 10450, 10350, 10250, 10150, 10100, 
			 9900, 9800,9700,9600,9500,9400,9300,9200,9100,9000,8900,8800,8700,8600,8500,8400,8300,8200,
			 8100,8000,7900,7800,7700,7600,7500,7400,7300,7200,7100,7000,6900,6800,6700,6600,6500,6400,
			 6300,6200,6100,6000,5000]

keshvary_grade = ['1-100','100-200','200-300','300-400','400-500','500-600','600-700','700-800','800-1200','1200-1400','1400-1800','1800-2000','2000-2200','2200-24000','2400-3000','3000-3500','3500-4000','4000-4500','4500-5000','5000-5500','5500-6000','6000-7000','7000-8000','8000-10000','10000-12000','12000-14000','14000-15000','15000-17000','17000-19000','19000-20000','20000-22000','22000-23000','23000-24000','24000-25000','25000-26000','26000-27000','27000-28000','28000-29000','29000-30000','30000-31000','31000-32000','32000-33000','33000-34000','34000-36000','36000-38000','38000-40000','40000-42000','42000-44000','44000-46000','46000-50000','50000-55000','55000-60000','60000-65000','65000-70000','70000-100000']
mantaghe_1 = ['1-45','45-81','82-117','118-146','147-175','176-204','234-261','291-319','320-377','378-434','492-549','607-663','721-777','892-948','1006-1062','1176-1232','1346-1402','1600-1739','1740-1879','2020-2158','2298-2436','2576-2713','2851-2988','3263-3398','3671-3806','4077-4210','4479-4612','4880-5011','5409-5540','6064-6323','6583-6840','7098-7353','7863-8114','8618-8867','9116-9363','10102-10346','10832-11073','11555-11793','12506-12741','13445-13909','14372-14831','15742-16193','16643-17088','17533-17974','18853-19287','20152-20580','21434-21857','22701-23118','23952-24365','25600-26000','26821-27224','28432-28830','30024-30418','31600-40000','40000-650000']
mantaghe_2 = ['1-45','46-88','89-131','132-174','175-217','218-260','204-346','389-431','432-517','518-603','690-775','816-946','1033-1118','1290-1374','1451-1546','1718-1802','1974-2059','2359-2571','2572-2785','2999-3211','3420-3637','3850-4062','4275-4478','4912-5123','5548-5759','6183-6393','6816-7046','7449-7659','8291-8500','9341-9760','10180-10597','11017-11433','12269-12685','13518-13932','14349-14762','16000-16418','17245-17657','18482-18892','20126-20535','21765-22582','23400-24214','25843-26655','27467-28277','29087-29895','31510-32315','33926-34728','36333-37134','38735-39532','41129-41925','44313-45106','46694-47486','49863-50651','53021-53808','56000-60000','60000-90000']
mantaghe_3 = ['1-24','9-35','36-75','76-110','111-138','139-165','166-221','250-276','277-332','333-388','444-499','556-611','668-724','837-893','951-1006','1121-1177','1292-1348','1550-1693','1694-1838','1984-2129','2276-2422','2570-2717','2866-3014','3314-3464','3767-3918','4224-4376','4684-4838','5150-5304','5776-5933','6569-6888','7210-7532','7858-8184','8842-9172','9839-10174','10514-10849','11872-12214','12906-13252','13951-14301','15361-15715','16788-17507','18232-18958','20425-21163','21905-22649','23399-24149','25661-26419','27947-28714','30257-31030','32586-33366','34935-35721','38092-38885','40479-41277','43483-44487','46911-47721','50000-55000','55000-100000']

def taraz_kol_func(t_kol:float, mantaghe):
	g = find_nearest(taraz_kol, value=t_kol)
	result = f"رتبه کشوری: {keshvary_grade[taraz_kol.index(g)]}\n"
	if mantaghe == "1":
		result += f"رتبه منطقه یک: {mantaghe_1[taraz_kol.index(g)]}"

	elif mantaghe == "2":
		result += f"رتبه منطقه دو: {mantaghe_2[taraz_kol.index(g)]}"
	
	elif mantaghe == "3":
		result += f"رتبه منطقه سه: {mantaghe_3[taraz_kol.index(g)]}"	
	
	return result


# 3
import re

result_region_1 = [1, 10, 20, 30, 40, 50, 60, 70, 80, 100, 120, 140, 160, 180, 200, 225, 250,
                 275, 300, 330, 360, 400, 430, 460, 500, 530, 560, 600, 
                640, 680, 700, 750, 800, 850, 900, 950, 1000, 1075, 1150, 1250, 1350, 1450, 1600, 1800, 2000, 
                2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 4000, 4400, 4800, 5200, 5600, 6000,
            	6400, 6800, 7200, 7600, 8000, 8500, 9000, 9500, 10000, 11000, 12000, 13000, 14000, 15000, 16000,
             	17000, 18000, 19000, 20000, 22000, 24000, 26000, 28000, 30000, 32000, 34000, 36000, 38000,
            	40000, 42000, 44000, 46000]

result_region_3 = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180, 200, 225, 250, 275, 300, 330, 
                   360, 400, 430, 460, 500, 530, 560, 600, 640, 680, 720, 460, 800, 850, 900, 950, 1000,
               		1050, 1100, 1170, 1250, 1330, 1400, 1500, 1700, 1900, 2000, 2200, 2400, 2600, 2800,
               		3000, 3200, 3400, 3600, 3800, 4000, 4300, 4600, 5000, 5300, 5600, 6000, 6400, 6800, 7200,
               		7600, 8000, 8400, 8800, 9200, 9600, 10000, 10500, 11000, 11500,  12000, 12500, 13000,
               		13500, 14000, 14500, 15000, 15500, 16000, 16500, 17000, 17500, 18000, 19000, 20000,
               		21000, 22000, 23000, 24000, 25000, 26000, 27000, 28000, 29000, 30000, 32000, 34000,
               		36000, 38000, 40000, 42000, 44000, 46000, 48000, 50000]

result_region_2 = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180, 200,
				    220, 240, 260, 280, 300, 320, 350, 380, 410, 440, 470, 500, 530, 560, 600,
					  640, 680, 720, 760, 800, 850, 900, 950, 1000, 1050, 1100, 1200, 1300, 1400,
					    1600, 1700, 1800, 1900, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3800,
						  4000, 4200, 4400, 4700, 5000, 5500, 6000, 6500, 7000, 7500, 8000, 8500, 9000, 10000, 11000,
						    12000, 13000, 15000, 17000, 19000, 21000, 23000, 25000, 27000, 29000, 32000,
							  35000, 39000, 42000 ,45000]


def handle_resault(num: int, region: int):
	if region == 1:
		r_a = result_region_1.copy()
		f = find_nearest(r_a, value=num)
		r_a.remove(f)
		e = find_nearest(r_a, value=num)
		try:
			x = result_region_1[result_region_1.index(int(max(f,e))) + 1]
		except:
			return [f"رتبه {min(f, e)} تا {max(f, e)}", "END"]
	if region == 2:
		r_a = result_region_2.copy()
		f = find_nearest(r_a, value=num)
		r_a.remove(f)
		e = find_nearest(r_a, value=num)
		try:
			x = result_region_2[result_region_2.index(int(max(f,e))) + 1]
		except:
			return [f"رتبه {min(f, e)} تا {max(f, e)}", "END"]
	if region == 3:
		r_a = result_region_3.copy()
		f = find_nearest(r_a, value=num)
		r_a.remove(f)
		e = find_nearest(r_a, value=num)
		try:
			x = result_region_3[result_region_3.index(int(max(f,e))) + 1]
		except:
			return [f"رتبه {min(f, e)} تا {max(f, e)}", "END"]
	return [f"رتبه {min(f, e)} تا {max(f, e)}", f"رتبه {max(f, e)} تا {x}"]


def read_and_print_content(filename, start_pattern, end_pattern):
	with open(filename, 'r', encoding='utf-8') as file:
		content = file.read()
			
	start_match = re.search(start_pattern, content)
	end_match = re.search(end_pattern, content)
	

	if start_match and end_match:
		start_index = start_match.end()
		end_index = end_match.start()
		return content[start_index:end_index]
	else:
		return f"اطلاعاتی برای این رتبه در دسترس نیست."

def get_konkor_grade(grade, region):
	if region == '1':
		filename = "file/science/منطقه 1.txt"
	elif region == '2':
		filename = "file/science/منطقه 2.txt"
	elif region == '3':
		filename = "file/science/منطقه 3.txt"
	else:
		return "خطایی رخ داده است"
	x = handle_resault(int(grade), int(region))
	print(x)
	start_pattern = x[0]
	end_pattern = x[1]
	return read_and_print_content(filename, start_pattern, end_pattern)


# def find_phrases(filename, pattern):
#   with open(filename, 'r') as f:
#     text = f.read()

#   matches = re.findall(pattern, text)
#   return matches

# if __name__ == '__main__':
#   filename = 'file/science/منطقه 1.txt'  # Replace with the actual filename.
#   pattern = r'رتبه (\d+) تا (\d+)'  # Change the pattern as needed.

#   x = []
#   matches = find_phrases(filename, pattern)
#   for match in matches:
#     for i in match:
#       x.append(int(i))
#   x = set(x)
#   x = list(x)
#   x.sort()
#   print(x)

